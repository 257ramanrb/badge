#!/usr/bin/env ruby

$:.push File.expand_path("../../lib", __FILE__)

require 'badge'
require 'commander'

HighLine.track_eof = false

class BadgeApplication
  include Commander::Methods

  def run
    program :version, Badge::VERSION
    program :description, 'Add a badge to your ios app icon'
    program :help, 'Author', 'Daniel Griesser <daniel.griesser.86@gmail.com>'
    program :help, 'Website', 'https://github.com/HazAT/badge'
    program :help, 'GitHub', 'https://github.com/HazAT/badge'
    program :help_formatter, :compact

    global_option('--verbose', 'Shows a more verbose output') { $verbose = true }

    always_trace!

    default_command :existing_project

    command :existing_project do |c|
      c.syntax = 'badge'
      c.description = "Adds a badge to your ios app icon"
      c.option '--dark', 'Adds a dark badge instead of the white'
      c.option '--alpha', 'Uses the word alpha instead of beta'
      c.option '--custom STRING', String, 'Overlay a custom image on your icon'
      c.option '--no_badge', 'Removes the beta badge'
      c.option '--shield STRING', String, 'Overlay a shield from shield.io on your icon, eg: Version-1.2-green'
      c.option '--shield_io_timeout INTEGER', Integer, 'The timeout in seconds we should wait the get a response from shield.io'
      c.option '--glob STRING', String, 'Glob pattern for finding image files Default: CURRENT_PATH/**/*.appiconset/*.{png,PNG}'

      c.action do |args, options|
        params = {}
        params[:dark] = options.dark
        params[:custom] = options.custom
        params[:no_badge] = options.no_badge
        params[:shield] = options.shield
        params[:shield_io_timeout] = options.shield_io_timeout
        params[:alpha] = options.alpha
        params[:glob] = options.glob
        Badge::Runner.new.run('.', params)
      end
    end

    run!
  end
end


begin
  BadgeApplication.new.run
end
